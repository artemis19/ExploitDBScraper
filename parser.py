#!/usr/bin/env python3

import json
import html
import string

# Used for checking duplicate/missing data
# import os
# import glob
# from hashlib import sha256

import csv

cwe_software_names = """
Out-of-bounds Write
Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
Out-of-bounds Read
Improper Input Validation
Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')
Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')
Use After Free
Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')
Cross-Site Request Forgery (CSRF)
Unrestricted Upload of File with Dangerous Type
Missing Authentication for Critical Function
Integer Overflow or Wraparound
Deserialization of Untrusted Data
Improper Authentication
NULL Pointer Dereference
Use of Hard-coded Credentials
Improper Restriction of Operations within the Bounds of a Memory Buffer
Missing Authorization
Incorrect Default Permissions
Exposure of Sensitive Information to an Unauthorized Actor
Insufficiently Protected Credentials
Incorrect Permission Assignment for Critical Resource
Improper Restriction of XML External Entity Reference
Server-Side Request Forgery (SSRF)
Improper Neutralization of Special Elements used in a Command ('Command Injection')
"""

# Normalize to remove parentheticals
cwe_software_names = [name.strip() for name in cwe_software_names.split("\n") if name]

all_data = json.load(open("exploitdb_data.json"))

# seen_hashes = []

# final_rows = []
output_file = "./tableau_exploitdb_data.csv"
with open(output_file, "w") as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(
        ["Exploit", "Year", "Month", "Day", "Tag", "Type", "Platform", "CWE Tag"]
    )

    for each_row in all_data:
        data = {}

        data["id"] = int(each_row["id"])
        data["exploit_name"] = html.unescape(each_row["description"][-1])
        data["type"] = each_row["type_id"]
        data["platform"] = each_row["platform_id"]
        data["date"] = each_row["date_published"]
        data["cwe_software"] = "null"

        data["date_year"], data["date_month"], data["date_day"] = [
            int(x) for x in each_row["date_published"].split("-")
        ]

        # Carve out CVE
        if "code" in each_row:
            if each_row["code"]:
                data["cve"] = "CVE-" + each_row["code"][-1]["code"]
            else:
                data["cve"] = "null"
        else:
            data["cve"] = "null"

        # Carve out tags
        if "tags" in each_row:
            if each_row["tags"]:
                data["tag"] = "null"
                for tag in each_row["tags"]:
                    if tag["title"] == "Metasploit Framework (MSF)":
                        continue
                    else:
                        data["tag"] = tag["title"]
            else:
                data["tag"] = "null"
        else:
            data["tag"] = "null"

        software_name_scores = []
        for tag in cwe_software_names:
            common_words = [
                "of",
                "and",
                "in",
                "a",
                "for",
                "with",
                "on",
                "to",
                "or",
                "os",
                "improper",
            ]
            normalized_name = tag
            normalized_name = normalized_name.replace("SQLi", "SQL Injection")
            normalized_name = normalized_name.replace("XSS", "Cross-site Scripting")
            normalized_name = normalized_name.replace("Disclosure", "Exposure")
            # Want some of the words in parentheticals but don't want to count punctuation
            for punc in string.punctuation:
                normalized_name = normalized_name.replace(punc, " ")
            score = 0
            for word in [n for n in normalized_name.split() if n]:
                if word.lower() in common_words:
                    # Ignores common words
                    continue
                # Exploit title is separated by a hyphen to indicate the platform application name, not the vulnerability
                score += "-".join(data["exploit_name"].split("-")[1:]).count(
                    f" {word} "
                )
                # Include tags, if applicable, to scores
                score += "-".join(data["tag"].split("-")[1:]).count(f" {word} ") * 2
            software_name_scores.append(score)

        if software_name_scores == [0] * len(cwe_software_names):
            data["cwe_software"] = "null"
        else:
            index_max = max(
                range(len(software_name_scores)),
                key=software_name_scores.__getitem__,
            )
            if software_name_scores[index_max] <= 0:
                data["cwe_software"] = "null"
            else:
                data["cwe_software"] = cwe_software_names[index_max]
                # print(
                #     f"Setting CWE SW: {data['exploit_name']} <=> {data['cwe_software']}"
                # )

        writer.writerow(
            [
                data["exploit_name"],
                data["date_year"],
                data["date_month"],
                data["date_day"],
                data["tag"],
                data["type"],
                data["platform"],
                data["cwe_software"],
            ]
        )

    # file_path = os.path.join(
    #     "exploitdb",
    #     "exploits",
    #     data["platform"].lower(),
    #     data["type"].lower(),
    #     str(data["id"]) + ".*",
    # )

    # file = glob.glob(file_path)
    # if file:
    #     for each_file in file:
    #         data["filename"] = each_file
    #         data["file_extension"] = os.path.splitext(each_file)[-1]
    #         data["file_size"] = os.stat(each_file).st_size
    #         with open(each_file, "rb") as filp:
    #             s = sha256(filp.read())
    #             file_hash = s.hexdigest()
    #             data["sha256"] = file_hash

    # if data["sha256"] in seen_hashes:
    #     continue
    # else:
    #     seen_hashes.append(sha256)

    # if not data["filename"]:
    #     print("WE FOUND A GHOST RECORD")
    #     exit()

    # final_rows.append(data)
    # pprint(data)
print(f"[+] {len(all_data)} exploits written to {output_file}!")
